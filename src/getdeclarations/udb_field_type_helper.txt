unit udb_field_type_helper;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IBConnection, SQLDB, DB;

function CharsetIdToStr(CharsetId: Integer; Conn: TIBConnection): string;

function FieldTypeToStr(FieldType, SubType, Precision, Scale, Length, CharsetId: Integer; Conn: TIBConnection): string;

function FieldSourceToStr(SourceName: string; Conn: TIBConnection): string;

function ResolveFieldTypeAsString(SourceName: string; FieldType, SubType, Precision, Scale, CharLen, CharsetId: Integer; Conn: TIBConnection): string;

function ResolveFieldTypeAsPascalFieldType(SourceName: string; FieldType, SubType, Precision, Scale, CharLen, CharsetId: Integer; Conn: TIBConnection): TFieldType;

function GetValidInputChars(const FirebirdType: string): TFieldChars;

implementation

function CharsetIdToStr(CharsetId: Integer; Conn: TIBConnection): string;
var
  Q: TSQLQuery;
begin
  Result := 'NONE';
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;
    Q.SQL.Text :=
      'SELECT RDB$CHARACTER_SET_NAME ' +
      'FROM RDB$CHARACTER_SETS ' +
      'WHERE RDB$CHARACTER_SET_ID = :ID';
    Q.Params.ParamByName('ID').AsInteger := CharsetId;
    Q.Open;
    if not Q.EOF then
      Result := Trim(Q.FieldByName('RDB$CHARACTER_SET_NAME').AsString);
  finally
    Q.Free;
  end;
end;

function FieldTypeToStr(FieldType, SubType, Precision, Scale, Length, CharsetId: Integer; Conn: TIBConnection): string;
begin
  case FieldType of
    7:  Result := 'SMALLINT';
    8:  Result := 'INTEGER';
    9:  Result := 'QUAD';
    10: Result := 'FLOAT';
    11: Result := 'D_FLOAT';
    12: Result := 'DATE';
    13: Result := 'TIME';
    14: Result := Format('CHAR(%d) CHARACTER SET %s', [Length, CharsetIdToStr(CharsetId, Conn)]);
    16: Result := 'BIGINT';
    27: Result := 'DOUBLE PRECISION';
    35: Result := 'TIMESTAMP';
    37: Result := Format('VARCHAR(%d) CHARACTER SET %s', [Length, CharsetIdToStr(CharsetId, Conn)]);
    261:
      if SubType = 1 then
        Result := Format('BLOB SUB_TYPE TEXT CHARACTER SET %s', [CharsetIdToStr(CharsetId, Conn)])
      else
        Result := 'BLOB';
  else
    Result := 'UNKNOWN';
  end;
end;

function FieldSourceToStr(SourceName: string; Conn: TIBConnection): string;
var
  Q: TSQLQuery;
  FieldType, SubType, Precision, Scale, CharLen, CharsetId: Integer;
begin
  Result := 'UNKNOWN';
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;
    Q.SQL.Text :=
      'SELECT RDB$FIELD_TYPE, RDB$FIELD_SUB_TYPE, RDB$FIELD_PRECISION, ' +
      'RDB$FIELD_SCALE, RDB$CHARACTER_LENGTH, RDB$CHARACTER_SET_ID ' +
      'FROM RDB$FIELDS ' +
      'WHERE RDB$FIELD_NAME = :SRC';
    Q.Params.ParamByName('SRC').AsString := SourceName;
    Q.Open;
    if not Q.EOF then
    begin
      FieldType  := Q.FieldByName('RDB$FIELD_TYPE').AsInteger;
      SubType    := Q.FieldByName('RDB$FIELD_SUB_TYPE').AsInteger;
      Precision  := Q.FieldByName('RDB$FIELD_PRECISION').AsInteger;
      Scale      := Q.FieldByName('RDB$FIELD_SCALE').AsInteger;
      CharLen    := Q.FieldByName('RDB$CHARACTER_LENGTH').AsInteger;
      CharsetId  := Q.FieldByName('RDB$CHARACTER_SET_ID').AsInteger;

      Result := FieldTypeToStr(FieldType, SubType, Precision, Scale, CharLen, CharsetId, Conn);
    end;
  finally
    Q.Free;
  end;
end;

function ResolveFieldTypeAsString(SourceName: string; FieldType, SubType, Precision, Scale, CharLen, CharsetId: Integer; Conn: TIBConnection): string;
begin
  if Trim(SourceName) <> '' then
    Result := FieldSourceToStr(SourceName, Conn)
  else
    Result := FieldTypeToStr(FieldType, SubType, Precision, Scale, CharLen, CharsetId, Conn);
end;

function ResolveFieldTypeAsPascalFieldType(SourceName: string; FieldType, SubType, Precision, Scale, CharLen, CharsetId: Integer; Conn: TIBConnection): TFieldType;
var
  FBTypeStr: string;
begin
  FBTypeStr := UpperCase(ResolveFieldTypeAsString(SourceName, FieldType, SubType, Precision, Scale, CharLen, CharsetId, Conn));

  if FBTypeStr = 'SMALLINT' then
    Result := ftSmallint
  else if FBTypeStr = 'INTEGER' then
    Result := ftInteger
  else if FBTypeStr = 'BIGINT' then
    Result := ftLargeint
  else if (FBTypeStr = 'FLOAT') or (FBTypeStr = 'D_FLOAT') or (FBTypeStr = 'DOUBLE PRECISION') or
          (FBTypeStr = 'DECIMAL') or (FBTypeStr = 'NUMERIC') then
    Result := ftFloat
  else if Pos('CHAR(', FBTypeStr) = 1 then
    Result := ftFixedChar
  else if Pos('VARCHAR(', FBTypeStr) = 1 then
    Result := ftString
  else if Pos('BLOB SUB_TYPE TEXT', FBTypeStr) = 1 then
    Result := ftMemo
  else if Pos('BLOB', FBTypeStr) = 1 then
    Result := ftBlob
  else if FBTypeStr = 'DATE' then
    Result := ftDate
  else if FBTypeStr = 'TIME' then
    Result := ftTime
  else if FBTypeStr = 'TIMESTAMP' then
    Result := ftDateTime
  else if FBTypeStr = 'QUAD' then
    Result := ftLargeint
  else
    Result := ftUnknown;
end;

function GetValidInputChars(const FirebirdType: string): TFieldChars;
var S: string;
const AllChars: set of char = [#0..#255];
begin
  S := UpperCase(FirebirdType);

  if (S = 'INTEGER') or (S = 'SMALLINT') or (S = 'BIGINT') or (S = 'QUAD') then
    Result := ['0'..'9', '-', '+']  // Integer Zahlen inkl. Vorzeichen
  else if (S = 'FLOAT') or (S = 'D_FLOAT') or (S = 'DOUBLE PRECISION') or (S = 'DECIMAL') or (S = 'NUMERIC') then
    Result := ['0'..'9', '-', '+', ',', '.']  // Gleitkommazahlen, Punkt oder Komma
  else if (S = 'DATE') then
    Result := ['0'..'9', '-','.','/']  // z.B. 2025-05-25 oder 25.05.2025 etc.
  else if (S = 'TIME') then
    Result := ['0'..'9', ':']  // z.B. 13:45:00
  else if (S = 'TIMESTAMP') then
    Result := ['0'..'9', '-', '.', '/', ':', ' ']  // Kombination aus Datum + Zeit
  {else if Pos('CHAR(', S) = 1 then
    Result := AllChars  // Freie Zeichen für Char
  else if Pos('VARCHAR(', S) = 1 then
    Result := AllChars  // Freie Zeichen für Varchar
  else if Pos('BLOB SUB_TYPE TEXT', S) = 1 then
    Result := AllChars  // Freie Zeichen für Textblob }
  else;
    //Result := [#0..#255];  // sonst keine Einschränkung
end;

end.
---------------------------------------------------------------------

unit udb_firebird_func_fetcher;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IBConnection, SQLDB,
  udb_field_type_helper;

function GetFirebirdFunctionDeclaration(Conn: TIBConnection; const FunctionName: string): string;

implementation

function GetFirebirdFunctionDeclaration(Conn: TIBConnection; const FunctionName: string): string;
var
  Q: TSQLQuery;
  Args: TStringList;
  ArgName, SourceName, ArgStr, RetStr, BodyText: string;
  PosIndex: Integer;
begin
  Args := TStringList.Create;
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;
    Q.SQL.Text :=
      'SELECT RDB$ARGUMENT_NAME, RDB$FIELD_SOURCE, RDB$ARGUMENT_POSITION ' +
      'FROM RDB$FUNCTION_ARGUMENTS ' +
      'WHERE RDB$FUNCTION_NAME = :FUNC ' +
      'ORDER BY RDB$ARGUMENT_POSITION NULLS FIRST';
    Q.Params.ParamByName('FUNC').AsString := UpperCase(FunctionName);
    Q.Open;

    RetStr := 'UNKNOWN';

    while not Q.EOF do
    begin
      ArgName := Trim(Q.FieldByName('RDB$ARGUMENT_NAME').AsString);
      SourceName := Trim(Q.FieldByName('RDB$FIELD_SOURCE').AsString);
      PosIndex := Q.FieldByName('RDB$ARGUMENT_POSITION').AsInteger;

      if (ArgName = '') and (PosIndex = 0) then
      begin
        // Rückgabewert (erste Zeile, ohne Namen)
        RetStr := FieldSourceToStr(SourceName, Conn);
      end
      else
      begin
        if ArgName = '' then
          ArgStr := FieldSourceToStr(SourceName, Conn)
        else
          ArgStr := Format('%s %s', [ArgName, FieldSourceToStr(SourceName, Conn)]);

        Args.Add(ArgStr);
      end;

      Q.Next;
    end;

    // Funktions-Body holen
    Q.Close;
    Q.SQL.Text := 'SELECT RDB$FUNCTION_SOURCE FROM RDB$FUNCTIONS WHERE RDB$FUNCTION_NAME = :FUNC';
    Q.Params.ParamByName('FUNC').AsString := UpperCase(FunctionName);
    Q.Open;

    BodyText := Trim(Q.FieldByName('RDB$FUNCTION_SOURCE').AsString);
    if BodyText = '' then
      BodyText := 'BEGIN' + LineEnding + '  -- Original function has no body!' + LineEnding + 'END';

    // Ergebnis zusammenbauen
    Result :=
      'SET TERM ^;' + LineEnding +
      Format('-- DROP FUNCTION %s;%s', [FunctionName, LineEnding]) +
      Format('CREATE OR ALTER FUNCTION %s(%s)%sRETURNS %s%sAS%s%s^%sSET TERM ;^',
        [FunctionName,
         LineEnding + '  ' + StringReplace(Trim(Args.Text), LineEnding, ',' + LineEnding + '  ', [rfReplaceAll]),
         LineEnding,
         RetStr,
         LineEnding,
         LineEnding + BodyText,
         LineEnding,
         LineEnding]);
  finally
    Args.Free;
    Q.Free;
  end;
end;

end.
-------------------------------------------------------------

unit udb_firebird_proc_fetcher;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IBConnection, SQLDB,
  udb_field_type_helper;

function GetFirebirdProcedureDeclaration(Conn: TIBConnection; const ProcName: string): string;

implementation

function CleanProcedureBody(const Body: string): string;
var
  Lines: TStringList;
  i: Integer;
begin
  Lines := TStringList.Create;
  try
    Lines.Text := Body;
    // Entferne überflüssige Leerzeilen
    for i := Lines.Count - 1 downto 0 do
      if Trim(Lines[i]) = '' then
        Lines.Delete(i);
    // Einrückung anpassen (einfach)
    for i := 0 to Lines.Count - 1 do
      Lines[i] := '  ' + Lines[i];
    Result := 'AS' + LineEnding + Lines.Text;
  finally
    Lines.Free;
  end;
end;

function FormatParamList(List: TStringList): string;
var
  i: Integer;
begin
  Result := '';
  for i := 0 to List.Count - 1 do
  begin
    if i < List.Count - 1 then
      Result := Result + '  ' + List[i] + ',' + LineEnding
    else
      Result := Result + '  ' + List[i] + LineEnding;
  end;
end;

function GetFirebirdProcedureDeclaration(Conn: TIBConnection; const ProcName: string): string;
var
  Q: TSQLQuery;
  Args, RetArgs: TStringList;
  ArgName, SourceName, ArgStr, ProcBody: string;
  IsOutput: Boolean;
begin
  Args := TStringList.Create;
  RetArgs := TStringList.Create;
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;

    // Parameter abfragen
    Q.SQL.Text :=
      'SELECT RDB$PARAMETER_NAME, RDB$FIELD_SOURCE, RDB$PARAMETER_TYPE ' +
      'FROM RDB$PROCEDURE_PARAMETERS ' +
      'WHERE RDB$PROCEDURE_NAME = :PROC ' +
      'ORDER BY RDB$PARAMETER_TYPE, RDB$PARAMETER_NUMBER';
    Q.Params.ParamByName('PROC').AsString := UpperCase(ProcName);
    Q.Open;

    while not Q.EOF do
    begin
      ArgName := Trim(Q.FieldByName('RDB$PARAMETER_NAME').AsString);
      SourceName := Trim(Q.FieldByName('RDB$FIELD_SOURCE').AsString);
      IsOutput := Q.FieldByName('RDB$PARAMETER_TYPE').AsInteger = 1;

      if ArgName = '' then
        ArgStr := FieldSourceToStr(SourceName, Conn)
      else
        ArgStr := Format('%s %s', [ArgName, FieldSourceToStr(SourceName, Conn)]);

      if IsOutput then
        RetArgs.Add(ArgStr)
      else
        Args.Add(ArgStr);

      Q.Next;
    end;

    // Body der Prozedur laden
    Q.Close;
    Q.SQL.Text := 'SELECT RDB$PROCEDURE_SOURCE FROM RDB$PROCEDURES WHERE RDB$PROCEDURE_NAME = :PROC';
    Q.Params.ParamByName('PROC').AsString := UpperCase(ProcName);
    Q.Open;

    ProcBody := Trim(Q.FieldByName('RDB$PROCEDURE_SOURCE').AsString);
    if ProcBody = '' then
      ProcBody := 'AS' + LineEnding + 'BEGIN' + LineEnding + '  -- Original Procedure has no body!' + LineEnding + 'END'
    else
      ProcBody := CleanProcedureBody(ProcBody);

    // Prozedur-Definition aufbauen
    Result := 'SET TERM ^;' + LineEnding + LineEnding;
    Result := Result + Format('-- DROP PROCEDURE %s;%s%s', [ProcName, LineEnding, LineEnding]);
    Result := Result + Format('CREATE OR ALTER PROCEDURE %s', [ProcName]) + LineEnding;

    if Args.Count > 0 then
    begin
      Args.Text := Trim(Args.Text);
      if Args.Text <> '' then
      begin
        Result := Result + '(' + LineEnding;
        Result := Result + FormatParamList(Args);
        Result := Result + ')' + LineEnding;
      end;
    end;

    if RetArgs.Count > 0 then
    begin
      RetArgs.Text := Trim(RetArgs.Text);
      if RetArgs.Text <> '' then
      begin
        Result := Result + 'RETURNS (' + LineEnding;
        Result := Result + FormatParamList(RetArgs);
        Result := Result + ')' + LineEnding;
      end;
    end;

    Result := Result + ProcBody + '^' + LineEnding + LineEnding;
    Result := Result + 'SET TERM ;^' + LineEnding;

  finally
    Args.Free;
    RetArgs.Free;
    Q.Free;
  end;
end;

end.
-------------------------------------------------------------------------------

unit udb_udr_func_fetcher;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IBConnection, SQLDB,
  udb_field_type_helper;

function GetUDRDeclaration(Conn: TIBConnection; const FunctionName: string): string;

implementation

function GetUDRDeclaration(Conn: TIBConnection; const FunctionName: string): string;
var
  Q: TSQLQuery;
  Args: TStringList;
  ArgName, SourceName, ArgStr, RetStr, EntryPoint: string;
begin
  Args := TStringList.Create;
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;
    Q.SQL.Text :=
      'SELECT RDB$ARGUMENT_NAME, RDB$FIELD_SOURCE, RDB$ARGUMENT_POSITION ' +
      'FROM RDB$FUNCTION_ARGUMENTS ' +
      'WHERE RDB$FUNCTION_NAME = :FUNC ' +
      'ORDER BY RDB$ARGUMENT_POSITION NULLS FIRST';
    Q.Params.ParamByName('FUNC').AsString := UpperCase(FunctionName);
    Q.Open;

    RetStr := 'UNKNOWN';

    while not Q.EOF do
    begin
      ArgName := Trim(Q.FieldByName('RDB$ARGUMENT_NAME').AsString);
      SourceName := Trim(Q.FieldByName('RDB$FIELD_SOURCE').AsString);

      if (Q.FieldByName('RDB$ARGUMENT_NAME').IsNull) and
         (Q.FieldByName('RDB$ARGUMENT_POSITION').AsInteger = 0) then
      begin
        // Rückgabewert
        RetStr := FieldSourceToStr(SourceName, Conn);
      end
      else
      begin
        if ArgName = '' then
          ArgStr := FieldSourceToStr(SourceName, Conn)
        else
          ArgStr := Format('%s %s', [ArgName, FieldSourceToStr(SourceName, Conn)]);

        Args.Add(ArgStr);
      end;

      Q.Next;
    end;

    // EntryPoint holen
    Q.Close;
    Q.SQL.Text := 'SELECT RDB$ENTRYPOINT FROM RDB$FUNCTIONS WHERE RDB$FUNCTION_NAME = :FUNC';
    Q.Params.ParamByName('FUNC').AsString := UpperCase(FunctionName);
    Q.Open;
    EntryPoint := Trim(Q.FieldByName('RDB$ENTRYPOINT').AsString);

    // Ergebnis zusammenbauen
    Result := Format('-- DROP FUNCTION %s;%s', [FunctionName, LineEnding]);
    Result := Result + Format(
      'CREATE OR ALTER FUNCTION %s(%s)%sRETURNS %s%sEXTERNAL NAME ''%s''%sENGINE UDR;',
      [FunctionName,
       LineEnding + '  ' + StringReplace(Trim(Args.Text), LineEnding, ',' + LineEnding + '  ', [rfReplaceAll]),
       LineEnding, RetStr, LineEnding, EntryPoint, LineEnding]);

  finally
    Args.Free;
    Q.Free;
  end;
end;

end.

-----------------------------------------------------------------------------------

unit udb_udr_proc_fetcher;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, IBConnection, SQLDB,
  udb_field_type_helper;

function GetUDRProcedureDeclaration(Conn: TIBConnection; const ProcName: string): string;

implementation

function GetUDRProcedureDeclaration(Conn: TIBConnection; const ProcName: string): string;
var
  Q: TSQLQuery;
  Args, RetArgs: TStringList;
  ArgName, SourceName, ArgStr, RetStr, EntryPoint: string;
  IsReturning: Boolean;
begin
  Args := TStringList.Create;
  RetArgs := TStringList.Create;
  Q := TSQLQuery.Create(nil);
  try
    Q.DataBase := Conn;

    // Parameter holen (INPUT/IN OUT)
    Q.SQL.Text :=
      'SELECT RDB$PARAMETER_NAME, RDB$FIELD_SOURCE, RDB$PARAMETER_TYPE ' +  // 0 = input, 1 = output
      'FROM RDB$PROCEDURE_PARAMETERS ' +
      'WHERE RDB$PROCEDURE_NAME = :PROC ' +
      'ORDER BY RDB$PARAMETER_TYPE, RDB$PARAMETER_NUMBER';
    Q.Params.ParamByName('PROC').AsString := UpperCase(ProcName);
    Q.Open;

    // Input und Output Parameter trennen
    while not Q.EOF do
    begin
      ArgName := Trim(Q.FieldByName('RDB$PARAMETER_NAME').AsString);
      SourceName := Trim(Q.FieldByName('RDB$FIELD_SOURCE').AsString);
      IsReturning := Q.FieldByName('RDB$PARAMETER_TYPE').AsInteger = 1;

      if IsReturning then
      begin
        // Output Parameter (Rückgabe)
        if ArgName = '' then
          RetStr := FieldSourceToStr(SourceName, Conn)
        else
          RetArgs.Add(Format('%s %s', [ArgName, FieldSourceToStr(SourceName, Conn)]));
      end
      else
      begin
        // Input Parameter
        if ArgName = '' then
          ArgStr := FieldSourceToStr(SourceName, Conn)
        else
          ArgStr := Format('%s %s', [ArgName, FieldSourceToStr(SourceName, Conn)]);
        Args.Add(ArgStr);
      end;
      Q.Next;
    end;

    // EntryPoint holen
    Q.Close;
    Q.SQL.Text := 'SELECT RDB$ENTRYPOINT FROM RDB$PROCEDURES WHERE RDB$PROCEDURE_NAME = :PROC';
    Q.Params.ParamByName('PROC').AsString := UpperCase(ProcName);
    Q.Open;
    EntryPoint := Trim(Q.FieldByName('RDB$ENTRYPOINT').AsString);

    // Prozedur-Definition bauen
    Result := Format('-- DROP PROCEDURE %s;%s', [ProcName, LineEnding]);
    Result := Result + Format('CREATE OR ALTER PROCEDURE %s(', [ProcName]) + LineEnding;

    if Args.Count > 0 then
      Result := Result + '  ' + StringReplace(Args.Text, LineEnding, ',' + LineEnding + '  ', [rfReplaceAll]);

    Result := Result + ')' + LineEnding;

    if RetArgs.Count > 0 then
    begin
      Result := Result + 'RETURNS (' + LineEnding;
      Result := Result + '  ' + StringReplace(RetArgs.Text, LineEnding, ',' + LineEnding + '  ', [rfReplaceAll]);
      Result := Result + ')' + LineEnding;
    end;

    Result := Result + Format('EXTERNAL NAME ''%s''%sENGINE UDR;', [EntryPoint, LineEnding]);

  finally
    Args.Free;
    RetArgs.Free;
    Q.Free;
  end;
end;

end.

----------------------------------------------------------------------------

meine code für treeview wo package knoten und unterknotens gefüllt werden:


   // Packages
    if Node.Text = 'Packages' then
    begin
      PackageNode:= Node;
      Objects.CommaText:= dmSysTables.GetDBObjectNames(DBIndex, otPackages, Count);
      PackageNode.Text := PackageNode.Text + ' (' + IntToStr(Objects.Count) + ')';
      Node.Text:= ANodeText + ' (' + IntToStr(Count) + ')';
      PackageNode.DeleteChildren;
      if Count > 0 then
      begin
        for i:= 0 to Objects.Count - 1 do
        begin
          Item:= tvMain.Items.AddChild(PackageNode, Objects[i]);
          Item.Text := Objects[i];
          Item.ImageIndex:= 55;
          Item.SelectedIndex:= 55;
          TPNodeInfos(Item.Data)^.ObjectType := tvotPackage;
        end;
      end;

      Item  := Item.Parent.Parent;
      for i := 0 to PackageNode.Count - 1 do
      begin
        Item:= tvMain.Items.AddChild(PackageNode.Items[i], 'Functions');
        TPNodeInfos(Item.Data)^.ObjectType := tvotPackageFunctionRoot;
        Item.ImageIndex := 57;
        Objects.Clear;
        GetPackageFunctions(dbIndex, Item.Parent.Text, Objects);
        Item.Text := Item.Text + ' (' + IntToStr(Objects.Count) + ')';
        for x := 0 to Objects.Count - 1 do
        begin
          Item:= tvMain.Items.AddChild(Item, Objects[x]);
          Item.ImageIndex := 57;
          TPNodeInfos(Item.Data)^.ObjectType := tvotPackageFunction;
          Item := Item.Parent;
        end;
      end;

      Item  := Item.Parent.Parent;
      for i := 0 to PackageNode.Count - 1 do
      begin
        Item:= tvMain.Items.AddChild(PackageNode.Items[i], 'Procedures');
        TPNodeInfos(Item.Data)^.ObjectType := tvotPackageProcedureRoot;
        Item.ImageIndex := 58;
        Objects.Clear;
        GetPackageProcedures(dbIndex, Item.Parent.Text, Objects);
        Item.Text := Item.Text + ' (' + IntToStr(Objects.Count) + ')';
        for x := 0 to Objects.Count - 1 do
        begin
          Item:= tvMain.Items.AddChild(Item, Objects[x]);
          Item.ImageIndex := 58;
          TPNodeInfos(Item.Data)^.ObjectType := tvotPackageProcedure;
          Item := Item.Parent;
        end;
      end;

      Item  := Item.Parent.Parent;
      for i := 0 to PackageNode.Count - 1 do
      begin
        Item:= tvMain.Items.AddChild(PackageNode.Items[i], 'UDR-Functions');
        TPNodeInfos(Item.Data)^.ObjectType := tvotPackageUDRFunctionRoot;
        Item.ImageIndex := 57;
        Objects.Clear;
        GetPackageUDRFunctions(dbIndex, Item.Parent.Text, Objects);
        Item.Text := Item.Text + ' (' + IntToStr(Objects.Count) + ')';
        for x := 0 to Objects.Count - 1 do
        begin
          Item:= tvMain.Items.AddChild(Item, Objects[x]);
          Item.ImageIndex := 57;
          TPNodeInfos(Item.Data)^.ObjectType := tvotPackageUDRFunction;
          Item := Item.Parent;
        end;
      end;

      Item  := Item.Parent.Parent;
      for i := 0 to PackageNode.Count - 1 do
      begin
        Item:= tvMain.Items.AddChild(PackageNode.Items[i], 'UDR-Procedures');
        TPNodeInfos(Item.Data)^.ObjectType := tvotPackageUDRProcedureRoot;
        Item.ImageIndex := 58;
        Objects.Clear;
        GetPackageUDRProcedures(dbIndex, Item.Parent.Text, Objects);
        Item.Text := Item.Text + ' (' + IntToStr(Objects.Count) + ')';
        for x := 0 to Objects.Count - 1 do
        begin
          Item:= tvMain.Items.AddChild(Item, Objects[x]);
          Item.ImageIndex := 58;
          TPNodeInfos(Item.Data)^.ObjectType := tvotPackageUDRProcedure;
          Item := Item.Parent;
        end;
      end;

    end



---und die functionen die oben verwendet werden:
procedure TfmMain.GetPackageFunctions(DatabaseIndex: Integer; APackageName: string; AStrList: TStringList);
var
  QueryTemplate: string;
  Rec: TDatabaseRec;
  FBFunctionName: string;
  TmpNode: TTreeNode;
begin
  QueryTemplate :=
    'SELECT RDB$Function_NAME AS NAME ' +
    'FROM RDB$Functions ' +
    'WHERE RDB$PACKAGE_NAME = ''%s'' ' +        // Muss Teil eines Packages sein
    'AND RDB$SYSTEM_FLAG = 0 ' +                 // Keine Systemfunktionen
    'AND RDB$MODULE_NAME IS NULL ' +             // Modulname ≠ extern → keine UDF
    'AND RDB$ENGINE_NAME IS NULL ' +
    'ORDER BY NAME';

  //SQLQuery1.SQLConnection.Params.Add('sql_dialect=3');
  SQLQuery1.Close;

  if Assigned(FSQLTransaction) then
    FSQLTransaction.Commit;

  Rec := RegisteredDatabases[DatabaseIndex];
  SetConnection(DatabaseIndex);

  SQLQuery1.SQL.Text := Format(QueryTemplate, [APackageName]);
  SQLQuery1.Open;

  if SQLQuery1.RecordCount  > 0 then
  begin
    AStrList.Clear;
    SQLQuery1.First;
    while not SQLQuery1.EOF do
    begin
      FBFunctionName := Trim(SQLQuery1.FieldByName('NAME').AsString);
      if AStrList.IndexOf(FBFunctionName) = -1 then
        AStrList.Add(FBFunctionName);
      SQLQuery1.Next;
    end;
  end;
  SQLQuery1.Close;
  //SQLQuery1.First;
end;

procedure TfmMain.GetPackageProcedures(DatabaseIndex: Integer; APackageName: string; AStrList: TStringList);
var
  QueryTemplate: string;
  Rec: TDatabaseRec;
  ProcName: string;
begin
  QueryTemplate :=
    'SELECT RDB$Procedure_NAME AS NAME ' +
    'FROM RDB$Procedures ' +
    'WHERE RDB$PACKAGE_NAME = ''%s'' ' +        // Muss Teil eines Packages sein
    'AND RDB$SYSTEM_FLAG = 0 ' +                 // Keine Systemfunktionen
    //'AND RDB$MODULE_NAME IS NULL ' +             // Modulname ≠ extern → keine UDF
    'AND RDB$ENGINE_NAME IS NULL ' +
    'ORDER BY NAME';

  SQLQuery1.SQLConnection.Params.Add('sql_dialect=3');
  SQLQuery1.Close;

  if Assigned(FSQLTransaction) then
    FSQLTransaction.Commit;

  Rec := RegisteredDatabases[DatabaseIndex];
  SetConnection(DatabaseIndex);

  SQLQuery1.SQL.Text := Format(QueryTemplate, [APackageName]);
  SQLQuery1.Open;

  if AStrList <> nil then
  begin
    AStrList.Clear;
    while not SQLQuery1.EOF do
    begin
      ProcName := Trim(SQLQuery1.FieldByName('NAME').AsString);
      if AStrList.IndexOf(ProcName) = -1 then
        AStrList.Add(ProcName);
      SQLQuery1.Next;
    end;
  end;
  SQLQuery1.Close;
  //SQLQuery1.First;
end;

procedure TfmMain.GetPackageUDRFunctions(DatabaseIndex: Integer; APackageName: string; AStrList: TStringList);
var
  QueryTemplate: string;
  Rec: TDatabaseRec;
  FBFunctionName: string;
  TmpNode: TTreeNode;
begin
  QueryTemplate :=
    'SELECT RDB$Function_NAME AS NAME ' +
    'FROM RDB$Functions ' +
    'WHERE RDB$PACKAGE_NAME = ''%s'' ' +        // Muss Teil eines Packages sein
    'AND RDB$SYSTEM_FLAG = 0 ' +                 // Keine Systemfunktionen
    'AND RDB$MODULE_NAME IS NULL ' +             // Modulname ≠ extern → keine UDF
    'AND RDB$ENGINE_NAME IS NOT NULL ' +
    'ORDER BY NAME';

  //SQLQuery1.SQLConnection.Params.Add('sql_dialect=3');
  SQLQuery1.Close;

  if Assigned(FSQLTransaction) then
    FSQLTransaction.Commit;

  Rec := RegisteredDatabases[DatabaseIndex];
  SetConnection(DatabaseIndex);

  SQLQuery1.SQL.Text := Format(QueryTemplate, [APackageName]);
  SQLQuery1.Open;

  if SQLQuery1.RecordCount  > 0 then
  begin
    AStrList.Clear;
    SQLQuery1.First;
    while not SQLQuery1.EOF do
    begin
      FBFunctionName := Trim(SQLQuery1.FieldByName('NAME').AsString);
      if AStrList.IndexOf(FBFunctionName) = -1 then
        AStrList.Add(FBFunctionName);
      SQLQuery1.Next;
    end;
  end;
  SQLQuery1.Close;
  //SQLQuery1.First;
end;

procedure TfmMain.GetPackageUDRProcedures(DatabaseIndex: Integer; APackageName: string; AStrList: TStringList);
var
  QueryTemplate: string;
  Rec: TDatabaseRec;
  ProcName: string;
begin
  QueryTemplate :=
    'SELECT RDB$Procedure_NAME AS NAME ' +
    'FROM RDB$Procedures ' +
    'WHERE RDB$PACKAGE_NAME = ''%s'' ' +        // Muss Teil eines Packages sein
    'AND RDB$SYSTEM_FLAG = 0 ' +                 // Keine Systemfunktionen
    //'AND RDB$MODULE_NAME IS NOT NULL ' +             // Modulname ≠ extern → keine UDF
    'AND RDB$ENGINE_NAME IS NOT NULL ' +
    'ORDER BY NAME';

  SQLQuery1.SQLConnection.Params.Add('sql_dialect=3');
  SQLQuery1.Close;

  if Assigned(FSQLTransaction) then
    FSQLTransaction.Commit;

  Rec := RegisteredDatabases[DatabaseIndex];
  SetConnection(DatabaseIndex);

  SQLQuery1.SQL.Text := Format(QueryTemplate, [APackageName]);
  SQLQuery1.Open;

  if AStrList <> nil then
  begin
    AStrList.Clear;
    while not SQLQuery1.EOF do
    begin
      ProcName := Trim(SQLQuery1.FieldByName('NAME').AsString);
      if AStrList.IndexOf(ProcName) = -1 then
        AStrList.Add(ProcName);
      SQLQuery1.Next;
    end;
  end;
  SQLQuery1.Close;
  //SQLQuery1.First;
end;
-----------------------------------------------------------------------------------


-- ein sehr einfacheBeispiel: Neues Package mit Header und Body
SET TERM %;
CREATE OR ALTER PACKAGE my_package
AS
BEGIN
  Function IntFunc(a INTEGER) RETURNS INTEGER;
  Function VarcharFunc(s VARCHAR(100)) RETURNS VARCHAR(100);
  Function DateFunc(d DATE) RETURNS DATE;
END%

RECREATE PACKAGE BODY my_package
AS
BEGIN
  Function IntFunc(a INTEGER) RETURNS INTEGER AS
  BEGIN
    RETURN a + 1;
  END%

  Function VarcharFunc(s VARCHAR(100)) RETURNS VARCHAR(100) AS
  BEGIN
    RETURN s || '_done';
  END%

  Function DateFunc(d DATE) RETURNS DATE AS
  BEGIN
    RETURN d + 7;
  END%
END%
SET TERM ;%
